




!!!!!!!!!!!!!!!!!             NOEM DE DATABASE ThemaopdrachtDB              !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!             ANDERS MAAKT JAVA GEEN VERBINDING             !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


!!!            WIJZIGINGEN PER 06-05             !!!


BEGIN voortaan iedere doPost methode voor servlets waar je de database bij nodig hebt met de volgende code:
	ConnectDB database = new ConnectDB();
	Connection con = database.maakVerbinding();
En EINDIG met dit:
	database.sluitVerbinding(con);
In de constructor van iedere ConnectDB<Klassenaam> geef je voortaan con mee, like so: 
	ConnectDBAuto autocon = new ConnectDBAuto(con)
	
Zo hebben we namelijk maar 1 database-verbinding per servlet, en kan de error waar we vandaag tegenaan liepen nooit meer gebeuren. 
Bovendien is dit een stuk efficienter in het gebruik van resources en kan ons programma sneller draaien.
	
	
!!!            WIJZIGINGEN PER 06-05             !!!


Let goed op de volgende datatypes:

-booleans bestaan niet in sql. In plaats daarvan heb ik CHAR(1) gebruikt, met als standaard waardes 'f' voor "false" en  't' voor "true". 
	Wees hier alsjeblieft consistent mee, want als je een ander char gebruikt werkt de code niet meer.
-Date in java en sql is niet hetzelfde. Zie ConnectDBKlus voor hoe je het ene type kan vertalen naar het andere.

Over de database:

-ints die worden gebruikt om een object te identificeren (bijv artikelnr) heten allemaal <tabelnaam>id in het belang van consistentie
	-dus bij Klant is het klantid, bij Product productid etc.
-alle tabellen die een idnummer hebben werken met AUTO_INCREMENT
-Tabel User is al aangemaakt voor als we met gebruikersaccounts gaan werken
	-ik ben er vanuit gegaan dat we 4 soorten users hebben: 0) administratie, 1) monteur, 2) jopie, en 3) klanten
	-User kan worden gelinkt aan Klant via klantid als de account van een klant is
	
Het gebruik van de database in dit project:

-verbinding met de database wordt gemaakt in het database package
	-iedere domeinklasse heeft een eigen ConnectDB<klassenaam> klasse
-als je info over een object uit de database wil halen, maak je een nieuw object van de benodigde ConnectDB<klassenaam> aan
	-vanuit dat ConnectDB object kan je weer methodes aanspreken om info uit de database te halen en erin te stoppen.
	
Standaard methodenamen in de ConnectDB klassen:

-get<meervoudKlassenaam> : geeft een ArrayList van alle objecten van die klasse die de database heeft
	-bijvoorbeeld getAutos geeft alle autos, getProducten alle producten, etc.
-nieuw/nieuwe<klassenaam> : maakt product in database, haalt hem op, en geeft hem terug.
	-geef mee als parameters alles wat de database nodig heeft om een nieuwe regel aan de tabel toe te voegen!
	-het aangemaakte object wordt terug gegeven zodat je aan de gebruiker kan laten zien wat er zojuist is toegevoegd.
-zoek<klassenaam> : geeft een object OF ArrayList terug van alle objecten die aan de ingegeven parameter(s) voldoen.
	-de standaardversie hiervan zoekt op <klasse>id en geeft het gevonden object terug.
	-maar het is ook handig om bijvoorbeeld alle produten met "moertje" in de naam te vinden.
		-in dat geval gebruik je de optie "<zoekattribuut> like %" + zoekterm + "%" in mysql.
	-het hangt er maar net vanaf voor welke parameters en return types de methode is geschreven.
-update<klassenaam> : geef een object van de klasse mee. De methode plukt het object uit elkaar en update alle attributen (BEHALVE 
	uiteraard het <klasse>id) zodat ongeacht wat je aan het object hebt veranderd, de database het ook aanpast.
	-als je gewoon elke keer een volledig object mee geeft hoef je geen aparte updateNaam updateRekeningnummer etc methodes te schrijven.
-verwijder<klassenaam> : neemt een <klasse>id als parameter en verwijderd de regel met dit id uit de database. LET OP dat dit niet het 
	object in java vernietigd!
